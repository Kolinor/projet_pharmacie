//---------------------------------------------------------------------------

#pragma hdrstop

#include "RS232.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

bool RS232::ouverture()
{
	hcom = CreateFile(L"COM1",GENERIC_WRITE|GENERIC_READ,0,NULL,OPEN_EXISTING,FILE_FLAG_NO_BUFFERING,NULL);

	if (hcom == INVALID_HANDLE_VALUE) {
//		MessageBox(NULL,"Impossible d'ouvrir le com","test",MB_ICONSTOP);
		return false;
	}

	GetCommState(hcom,&serie);
	serie.BaudRate = 9600;
	serie.ByteSize = 8;
	serie.Parity = NOPARITY;
	serie.StopBits = ONESTOPBIT;
	SetCommState(hcom,&serie);
	return true;
}

void RS232::fermer()
{
	CloseHandle(hcom);
}

bool RS232::ecriture(char * str)
{


	unsigned long pt = 0;

//	over.Internal = 0;
//	over.InternalHigh =0;
//	over.OffsetHigh = 0;
//	over.Offset = 0;
//	over.Pointer = NULL;
//	over.hEvent = NULL;

	WriteFile(hcom, str, strlen(str), &pt, NULL);
	PurgeComm(hcom, PURGE_TXCLEAR);

	return true;

	
}

char* RS232::lecture()
{

	Thread = CreateThread(NULL,0,this->threadLecture,this,0,NULL);
	int taille = 10;
	char *chaine;
	unsigned long pt;

	pt = 0;
	chaine = new char[taille+1];
	chaine[0]='\0';

	ReadFile(hcom,chaine,taille,&pt,NULL);
	PurgeComm(hcom,PURGE_RXCLEAR);

	return chaine;


}

DWORD WINAPI RS232::threadLecture(LPVOID lpParam)
{
	int taille = 10;
	char *chaine;
	unsigned long pt;

	pt = 0;
	chaine = new char[taille+1];
	chaine[0]='\0';

	ReadFile(hcom,chaine,taille,&pt,NULL);
	PurgeComm(hcom,PURGE_RXCLEAR);

	return chaine;
	return 0;
}
