//---------------------------------------------------------------------------

#pragma hdrstop

#include "tapiris.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

tapiris::tapiris()
{
	this->mutex = CreateMutex(NULL,FALSE,NULL);
}

tapiris::~tapiris()
{
	this->deactivatePiston(1);
	this->deactivatePiston(2);
	this->deactivatePiston(3);

	this->etatCapteur = false;
	delete pmodBus;
}

bool tapiris::connected(string adress, unsigned short port)
{
	pmodBus = new modBus();
	bool connected = pmodBus->connected(adress,port);
	return connected;
}

void tapiris::activeCapteur()
{
	this->etatCapteur = true;
	this->testb = true;
	Thread1 = CreateThread(NULL,0,this->threadTest,this,0,NULL);
	Thread = CreateThread(NULL,0,this->threadCapteur,this,0,NULL);
}

void tapiris::deactivateCapteur()
{
	this->etatCapteur = false;
	this->testb = false;
}

void tapiris::disconnect()
{
	this->~tapiris();
}

void tapiris::activePiston(int piston, int delay)
{
	Thread = CreateThread(NULL,0,this->threadApiston,new ThreadDataTapiris(piston,delay,this),0,NULL);
}

DWORD WINAPI tapiris::threadApiston(LPVOID lpParam)
{
	ThreadDataTapiris * apiston = (ThreadDataTapiris*)lpParam;
	int npiston = apiston->piston;
	bool verif = false;
	unsigned int pist;
	WaitForSingleObject(apiston->tapis->mutex1,INFINITE);
	if (npiston == 1) {
		pist = 6;
		apiston->tapis->etat[1] = 1;
	}
	if (npiston == 2) {
		pist = 7;
		apiston->tapis->etat[2] = 1;
	}
	if (npiston == 3) {
		pist = 5;
		apiston->tapis->etat[3] = 1;
	}
	ReleaseMutex(apiston->tapis->mutex1);
	if (npiston <= 3 && npiston >= 1) {
		Sleep(apiston->delay);
		verif = apiston->tapis->pmodBus->writeWord(pist,1);
		HANDLE Thread = CreateThread(NULL,0,apiston->tapis->threadDpiston,new ThreadDataTapiris(apiston->piston,apiston->delay,apiston->tapis),0,NULL);
	}
	return 0;
}

DWORD WINAPI tapiris::threadDpiston(LPVOID lpParam)
{
	ThreadDataTapiris * dpiston = (ThreadDataTapiris*)lpParam;
	Sleep(150);

	unsigned int pist;
	if (dpiston->piston == 1) {
		pist = 6;
		dpiston->tapis->etat[1] = 0;
	}
	if (dpiston->piston == 2) {
		pist = 7;
		dpiston->tapis->etat[2] = 0;
	}
	if (dpiston->piston == 3) {
		pist = 5;
		dpiston->tapis->etat[3] = 0;
	}

	dpiston->tapis->pmodBus->writeWord(pist,0);
	return 0;
}

bool tapiris::activeTapis()
{
	WaitForSingleObject(this->mutex1,INFINITE);
	bool verif = pmodBus->writeWord(0,0);
	if (verif == true) {
		this->etat[0] = 1;
	}
	ReleaseMutex(this->mutex1);
	return verif;
}

bool tapiris::deactivateTapis()
{
	bool verif = pmodBus->writeWord(0,1);
	WaitForSingleObject(this->mutex1,INFINITE);
	if (verif == true) {
		this->etat[0] = 0;
	}
	ReleaseMutex(this->mutex1);
	return verif;
}

bool tapiris::deactivatePiston(int piston)
{
	int npiston = piston;
	bool verif = false;
	unsigned int pist;

	WaitForSingleObject(this->mutex1,INFINITE);
	if (npiston == 1) {
		pist = 0006;
		this->etat[1] = 0;
	}
	if (npiston == 2) {
		pist = 0007;
		this->etat[2] = 0;
	}
	if (npiston == 3) {
		pist = 0005;
        this->etat[3] = 0;
	}
	if (npiston <= 3 && npiston >= 1) {
		verif = pmodBus->writeWord(pist,0000);
	}
	ReleaseMutex(this->mutex1);
	return verif;
}


DWORD WINAPI tapiris::threadCapteur(LPVOID lpParam)
{
	tapiris * tapis = (tapiris*)lpParam;

	char buffer[4096];
	int bytes;
	int caisse1, caisse2;

	bool captState[2];
	captState[0] = false;
	captState[1] = false;
	captState[2] = false;

	while(tapis->etatCapteur == true)
	{
		ZeroMemory(buffer, 4096);
		tapis->pmodBus->readWord(1,4,buffer);

		if(buffer[7] == 0x04)
		{

			WaitForSingleObject(tapis->mutex,INFINITE);
			WaitForSingleObject(tapis->mutex1,INFINITE);
			if (buffer[12] == 1) {

				tapis->etat[4] = 1;
				if(captState[0] == false)
				{
					caisse1 = tapis->caisse1.pop_front();
					if (caisse1 == 1) {
						tapis->activePiston(1,300);
					}
					captState[0] = true;
				}

			}
			else
			{
				tapis->etat[4] = 0;
				captState[0] = false;
			}


			if (buffer[14] == 1) {

				tapis->etat[5] = 1;
				if(captState[1] == false)
				{
					caisse2 = tapis->caisse2.pop_front();

					if (caisse2 == 2) {
						tapis->activePiston(2,300);
					}

					captState[1] = true;
				}

			}
			else
			{
				tapis->etat[5] = 0;
				captState[1] = false;
			}

			if (buffer[16] == 1) {

				tapis->etat[6] =1;
				if (captState[2] == false) {
//					tapis->activePiston(3,300);
				}
			}
			else
			{
				tapis->etat[6] = 0;
				captState[1] = false;
			}


			ReleaseMutex(tapis->mutex1);
			ReleaseMutex(tapis->mutex);
		}

		Sleep(120);

	}
	return 0;
}

void tapiris::newDrug(int caisse)
{
	WaitForSingleObject(this->mutex,INFINITE);
		if (caisse > 0 && caisse < 4) {
			this->caisse1.push_back(caisse);
			if (caisse != 1) {
				 this->caisse2.push_back(caisse);
			}
		}
	ReleaseMutex(this->mutex);
}

int tapiris::test()
{
	WaitForSingleObject(this->mutex,INFINITE);
	int test = this->caisse1.size();
	ReleaseMutex(this->mutex);
	return test;

}

int tapiris::test1()
{
	WaitForSingleObject(this->mutex,INFINITE);
	int test = this->caisse1.pop_front();
	ReleaseMutex(this->mutex);
	return test;

}

int tapiris::etatReturn(int idx)
{
	int tabCopy[7];
	WaitForSingleObject(this->mutex1,INFINITE);
	for (int i = 0; i < 7; i++) {
		tabCopy[i] = this->etat[i];
	}
	ReleaseMutex(this->mutex1);
	return tabCopy[idx];
}

DWORD WINAPI tapiris::threadTest(LPVOID lpParam)
{
	tapiris * tapis = (tapiris*)lpParam;

    char buffer[4096];
	int bytes;

	while (tapis->testb == true)
	{
		ZeroMemory(buffer, 4096);
		tapis->pmodBus->readWord(4,4,buffer);

		WaitForSingleObject(tapis->mutex,INFINITE);
		WaitForSingleObject(tapis->mutex1,INFINITE);

		if (buffer[10] == 1) {

			tapis->etat[6] = 1;
			tapis->activePiston(3,300);

		}
		else
		{
			tapis->etat[6] = 0;

		}


		ReleaseMutex(tapis->mutex1);
		ReleaseMutex(tapis->mutex);
		Sleep(2500);
	}


		return 0;
}



