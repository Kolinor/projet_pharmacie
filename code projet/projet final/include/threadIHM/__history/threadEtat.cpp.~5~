#include <vcl.h>
//#include <shellapi.h> // nécéssairesous BCB4
#pragma hdrstop

#include "threadEtat.h"
#include "IHM_Pilote.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------

//   Important : les méthodes et les propriétés des objets de la VCL ne peuvent être
//   utilisées que dans une méthode appelée en utilisant Synchronize, comme :
//
//      Synchronize(UpdateCaption);
//
//   où UpdateCaption serait de la forme :
//
//      void __fastcall TMonThread::UpdateCaption()
//      {
//        Form1->Caption = "Mise à jour dans un thread";
//      }
//---------------------------------------------------------------------------

__fastcall threadEtat::threadEtat(bool CreateSuspended,tapiris * tapis)
		: TThread(CreateSuspended)
{
	this->tapis = tapis;
	this->etatThread = true;
}
//---------------------------------------------------------------------------

__fastcall threadEtat::~threadEtat()
{
	this->etatThread = false;
}

//---------------------------------------------------------------------------
void __fastcall threadEtat::Execute()
{
	while (this->etatThread == true) {
		if (tapis->etatReturn(0) == 1) {
			Synchronize(lblTapisM);
		}
		else {
			Synchronize(lblTapisA);
		}

		if (tapis->etatReturn(1) == 1) {
			Synchronize(lblPiston1M);
		}
		else {
			Synchronize(lblPiston1A);
		}

		if (tapis->etatReturn(2) == 1) {
			Synchronize(lblPiston2M);
		}
		else {
			Synchronize(lblPiston2A);
		}

		if (tapis->etatReturn(3) == 1) {
			Synchronize(lblPiston3M);
		}
		else {
			Synchronize(lblPiston3A);
		}

		if (tapis->etatReturn(4) == 1) {
			Synchronize(lblCapteur1D);
		}
		else {
			Synchronize(lblCapteur1E);
		}

		if (tapis->etatReturn(5) == 1) {
			Synchronize(lblCapteur2D);
		}
		else {
			Synchronize(lblCapteur2E);
		}
		Sleep(100);
	}
}
//---------------------------------------------------------------------------
void __fastcall threadEtat::lblTapisM()
{
	Form1->lblTapisRep->Caption = "marche";
}

void __fastcall threadEtat::lblTapisA()
{
	Form1->lblTapisRep->Caption = "arret";
}

void __fastcall threadEtat::lblPiston1M()
{
	Form1->lblPiston1Rep->Caption = "actionné";
}


void __fastcall threadEtat::lblPiston1A()
{
	Form1->lblPiston1Rep->Caption = "arrêté";
}

void __fastcall threadEtat::lblPiston2M()
{
	Form1->lblPiston2Rep->Caption = "actionné";
}

void __fastcall threadEtat::lblPiston2A()
{
	Form1->lblPiston2Rep->Caption = "arrêté";
}

void __fastcall threadEtat::lblPiston3M()
{
	Form1->lblPiston3Rep->Caption = "actionné";
}

void __fastcall threadEtat::lblPiston3A()
{
	Form1->lblPiston3Rep->Caption = "arrêté";
}

void __fastcall threadEtat::lblCapteur1D()
{
	Form1->lblCapteur1Rep->Caption = "detécte";
}

void __fastcall threadEtat::lblCapteur1E()
{
	Form1->lblCapteur1Rep->Caption = "éteint";
}

void __fastcall threadEtat::lblCapteur2D()
{
	Form1->lblCapteur2Rep->Caption = "detécte";
}

void __fastcall threadEtat::lblCapteur2E()
{
	Form1->lblCapteur2Rep->Caption = "éteint";
}
