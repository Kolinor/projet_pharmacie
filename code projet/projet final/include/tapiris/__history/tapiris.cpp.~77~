//---------------------------------------------------------------------------

#pragma hdrstop

#include "tapiris.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

tapiris::tapiris()
{

}

tapiris::~tapiris()
{
	this->deactivatePiston(1);
	this->deactivatePiston(2);
	this->deactivatePiston(3);
	this->deactivateTapis();

	this->etatCapteur = false;
	delete pmodBus;
}

bool tapiris::connected(string adress, unsigned short port)
{
	pmodBus = new modBus();
	bool connected = pmodBus->connected(adress,port);
	this->etatCapteur = true;
	Thread = CreateThread(NULL,0,this->capteur,this,0,NULL);
	return connected;
}

void tapiris::disconnect()
{
	this->~tapiris();
}

bool tapiris::activePiston(int piston)
{
	Thread = CreateThread(NULL,0,this->ppiston,new ThreadDataTapiris(piston, this),0,NULL);
	return true;
//	int npiston = piston;
//	bool verif = false;
//	unsigned int pist;
//	if (npiston == 1) {
//		pist = 6;
//	}
//	if (npiston == 2) {
//		pist = 7;
//	}
//	if (npiston == 3) {
//		pist = 5;
//	}
//	if (npiston <= 3 && npiston >= 1) {
//		verif = pmodBus->writeWord(pist,1);
//		Thread = CreateThread(NULL,0,this->piston,new ThreadDataTapiris(piston, this),0,NULL);
//	}
//	return verif;
}

DWORD WINAPI tapiris::ppiston(LPVOID lpParam)
{
	ThreadDataTapiris * ppiston = (ThreadDataTapiris*)lpParam;
	int npiston = ppiston->piston;
	bool verif = false;
	unsigned int pist;
	if (npiston == 1) {
		pist = 6;
	}
	if (npiston == 2) {
		pist = 7;
	}
	if (npiston == 3) {
		pist = 5;
	}
	if (npiston <= 3 && npiston >= 1) {
		verif = ppiston->tapis->pmodBus->writeWord(pist,1);
		HANDLE Thread = CreateThread(NULL,0,ppiston->piston,new ThreadDataTapiris(ppiston->piston,ppiston->tapis),0,NULL);
	}
	return 0;
}

DWORD WINAPI tapiris::piston(LPVOID lpParam)
{
	ThreadDataTapiris * piston = (ThreadDataTapiris*)lpParam;
	Sleep(300);

	unsigned int pist;
	if (piston->piston == 1) {
		pist = 6;
	}
	if (piston->piston == 2) {
		pist = 7;
	}
	if (piston->piston == 3) {
		pist = 5;
	}

	piston->tapis->pmodBus->writeWord(pist,0);
	delete piston;
	return 0;
}

bool tapiris::activeTapis()
{
	bool verif = pmodBus->writeWord(0000,0000);
	return verif;
}

bool tapiris::deactivateTapis()
{
	bool verif = pmodBus->writeWord(0000,0001);
	return verif;
}

bool tapiris::deactivatePiston(int piston)
{
	int npiston = piston;
	bool verif = false;
	unsigned int pist;
	if (npiston == 1) {
		pist = 0006;
	}
	if (npiston == 2) {
		pist = 0007;
	}
	if (npiston == 3) {
		pist = 0005;
	}
	if (npiston <= 3 && npiston >= 1) {
		verif = pmodBus->writeWord(pist,0000);
	}
	return verif;
}


DWORD WINAPI tapiris::capteur(LPVOID lpParam)
{
	tapiris * tapis = (tapiris*)lpParam;

	char buffer[4096];
	bool test = true;
	int tabPiece[2];
	int bytes;

	bool captState[2];
	captState[0] = false;
	captState[1] = false;

	while(tapis->etatCapteur == true || test == false)
	{
		ZeroMemory(buffer, 4096);
		test = tapis->pmodBus->readWord(1,3,buffer);

		if(buffer[7] == 0x04)
		{
			if (buffer[12] == 1) {
				if(captState[0] == false)
				{
					tapis->activePiston(1);
					captState[0] = true;
				}
			}
			else
			{
				captState[0] = false;
			}

			if (buffer[14] == 1) {
				if(captState[1] == false)
				{
					tapis->activePiston(2);
					captState[1] = true;
				}

			}
			else
			{
				captState[1] = false;
			}
		}

		Sleep(50);

	}
	return 0;
}

void tapiris::newDrug(int caisse)
{

}
