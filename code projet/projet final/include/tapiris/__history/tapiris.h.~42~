//---------------------------------------------------------------------------
/*******************************************************
Nom ......... : tapiris.h
Role ........ : faire les actions demandé par l'utilisateur sur le tapis
Auteur ...... : Colin.B
Version ..... : V1.1 du 03/05/2019

Compilation : c++ builder
********************************************************/
//---------------------------------------------------------------------------

#ifndef tapirisH
#define tapirisH
#include "../include/modBus/modBus.h"
#include "../include/vector/Vector.h"

using namespace std;

//---------------------------------------------------------------------------

class tapiris
{
	private:
		 struct ThreadDataTapiris
{
	int piston;
	tapiris * tapis;
			ThreadDataTapiris(int piston, tapiris * tapis)
			{
				this->piston = piston;
				this->tapis = tapis;
			}
		};
		//structure permettant de transmettre des variables à un thread

//		struct ThreadDataPiston
//		{
//			int piston;
//			tapiris * tapis;
//				ThreadDataCaisse(int piston, tapiris * tapis)
//			{
//				this->piston = piston;
//				this->tapis = tapis;
//			}
//		};

		bool etatCapteur;
		Vector<int> vpiston;
		modBus * pmodBus;
		DWORD dwChars;
		HANDLE Thread;
	public:

		tapiris();
		~tapiris();
		//permet d'effectuer la connexion au tapis
		bool connected(string adress, unsigned short port);
		//permet d'arreter la connexion au tapiris
		void disconnect();
		//permet d'avtiver un piston
		bool activePiston(int piston);
		//permet de déactiver un piston sert pour le debogage
		bool deactivatePiston(int piston);
		//permet d'allumer le moteur du tapis
		bool activeTapis();
		//permet de desactiver la moteur du tapis
		bool deactivateTapis();
		void newDrug(int caisse);
		//thread permmettant de ratracter un piston automatiquement
		static DWORD WINAPI piston(LPVOID lpParam);
		//thread permettant le mise en fonction automatique du tapiris
		static DWORD WINAPI capteur(LPVOID lpParam);
		static DWORD WINAPI ppiston(LPVOID lpParam);
};

#endif
